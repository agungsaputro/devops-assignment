name : Docker-CI
- task: HelmDeploy@0
  inputs:
    connectionType: 'Azure Resource Manager'
    azureSubscription: 'Azure for Students(f67e9926-784a-4e8a-817f-43b717ab6cb5)'
    azureResourceGroup: 'devops'
    kubernetesCluster: 'testing'
    useClusterAdmin: true
    namespace: 'test'
    command: 'ls'
trigger:
  branches:
    include:
      - master
 
pool:
  vmImage: 'ubuntu-latest'
 
variables:
  AzureSubscription: 'aks' # Name of the Service Connection
  ApiName: 'devops-assignment'
  ClusterResourceGroup: devops 
  ChartPackage: '$(Build.ArtifactStagingDirectory)/$(ApiName)-$(Build.BuildNumber).tgz'
  ChartPath: 'devops/'
  ImageName: 'agung1ds/devops-assignment:$(Build.BuildId)'
  HelmVersion: 3.5.0
  K8sNamespace: 'test'
  KubernetesCluster: 'testing'
 
stages:
- stage: Build
  displayName: Build image
  jobs:  
  - job: Build
    displayName: Build and push Docker image
    steps:
    - task: Docker@1
      displayName: 'Build the Docker image'
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryEndpoint: 'dockerhub'
        command: 'Build an image'
        dockerFile: '**/Dockerfile'
        imageName: '$(ImageName)'
        includeLatestTag: true
        useDefaultContext: false
        buildContext: '.'
     
    - task: Docker@1
      displayName: 'Push the Docker image to Dockerhub'
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryEndpoint: 'dockerhub'
        command: 'Push an image'
        imageName: '$(ImageName)'
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

- stage: Package
  displayName: Helm Package
  jobs:  
  - job: Installer
    displayName: Helm Installer
    steps:
    - task: HelmInstaller@0
      displayName: 'Install Helm $(HelmVersion)'
      inputs:
        helmVersion: $(HelmVersion)
        checkLatestHelmVersion: false
        installKubectl: true
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

    # - task: HelmDeploy@0
    #   displayName: 'helm package'
    #   inputs:
    #     azureSubscriptionEndpoint: $(AzureSubscription)
    #     azureResourceGroup: $(ClusterResourceGroup)
    #     kubernetesCluster: $(KubernetesCluster)
    #     command: 'package'
    #     chartPath: $(ChartPath)
    #     chartVersion: $(Build.BuildNumber)
    #     save: false
    #     namespace: $(K8sNamespace)
    #   condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest')




    